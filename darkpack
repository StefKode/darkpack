#!/bin/bash
# Stefan Koch, 2018
# License: GPL v3
#
#
# darkpack -p my_arch_name file|dir
# darkpack -i my_arch_name
# darkpack -u my_arch_name

#-----------------------------------------------------------------
cmd="$1"
check=""
cwd="$(pwd)"

if [ "$1" = "-p" ]; then
	name="$2"
	src="$3"
	check="$3"
	checkno="$4"
	pack="$name.dark"
	if [ ! -e "$src" ]; then
		echo "Error: file not found"
		exit 1
	fi
	if [ -e "$pack" ]; then
		echo "Error: $pack already exists"
		exit 1
	fi
	touch $pack
	if [ $? -ne 0 ]; then
		echo "Error: Could not write pack"
		exit 1
	fi
	pack=$(readlink -f $pack)
fi

if [ "$1" = "-i" ]; then
	pack="$2"
	check="$2"
	checkno="$3"
	pack=$(readlink -f $pack)
	if [ ! -e "$pack" ]; then
		echo "Error: file not found"
		exit 1
	fi
fi

if [ "$1" = "-u" ]; then
	pack="$2"
	check="$2"
	checkno="$3"
	pack=$(readlink -f $pack)
	if [ ! -e "$pack" ]; then
		echo "Error: file not found"
		exit 1
	fi
fi

if [ "$check" = "" -o "$checkno" != "" ]; then
	echo " darkpack -p my_arch_name file|dir"
	echo " darkpack -i my_arch_name"
	echo " darkpack -u my_arch_name"
	exit 1
fi

#-----------------------------------------------------------------

function encryptFile {
	gpg --batch --passphrase-fd 0 -c "$1"
}

# encfile destfile
function decryptFile {
	gpg -q --batch --passphrase-fd 0 -o "$2" -d "$1" 2>&1 > /dev/null
}

function doPack {
	# get password
	read -s -p "  Type Password: " password0
	echo ""
	read -s -p "ReType Password: " password
	echo ""

	if [ "$password0" != "$password" ]; then
		echo "Error: passwords empty or dont match"
		rm -f $pack
		exit 1
	fi

	# create working dir
	temp=$(mktemp -d)

	# create descriptor file
	echo "[$name] = $src" > "$temp/description"

	# encrypt descriptor
	echo "$password" | encryptFile "$temp/description"
	rm -f "$temp/description"

	# pack the src
	tar cfz "$temp/content" "$src"

	# encrypt content
	echo "$password" | encryptFile "$temp/content"
	rm -f "$temp/content"

	# pack the pack
	cd $temp
	tar cf "$pack" *
	rm -f *
	cd ..
	rmdir "$temp"
	cd $cwd
	echo "Created: $pack"
}

function checkPack {
	# get password
	read -s -p "Password: " password

	# unpack description
	tmp=$(mktemp -d)
	tar xf "$pack" -C "$tmp" description.gpg
	if [ $? -ne 0 ]; then
		echo "unpack failed"
		exit 1
	fi

	# decrypt meta data
	echo "$password" | decryptFile "$tmp/description.gpg" "$tmp/description"
	if [ $? -ne 0 ]; then
		echo "decrypt failed"
		exit 1
	fi
	echo ""
	echo ""
	echo "-------------------------------------"
	echo "Dark Pack Archive:"
	echo ""
	echo "Info: $(cat $tmp/description)"
	echo "-------------------------------------"
	cd "$tmp"
	rm -f *
	cd ..
	rmdir "$tmp"
	exit 0
}

function unPack {
	# get password
	read -s -p "Password: " password

	# unpack description
	tmp=$(mktemp -d "$HOME/darkpack.XXXXXX")
	tar xf "$pack" -C "$tmp" description.gpg
	if [ $? -ne 0 ]; then
		echo "unpack failed"
		echo "Delete: $tmp manually"
		exit 1
	fi

	# decrypt meta data
	echo "$password" | decryptFile "$tmp/description.gpg" "$tmp/description"
	if [ $? -ne 0 ]; then
		echo "decrypt failed"
		echo "Delete: $tmp manually"
		exit 1
	fi
	echo ""
	echo ""
	echo "-------------------------------------"
	echo "Dark Pack Archive:"
	echo ""
	echo "Info: $(cat $tmp/description)"
	echo "-------------------------------------"
	cd "$tmp"
	echo "Decrypt contents? (Enter=Y, Ctrl-C=No)"
	read ignore

	tar xf "$pack" -C "$tmp" content.gpg
	if [ $? -ne 0 ]; then
		echo "extract of contents failed"
		echo "Delete: $tmp manually"
		exit 1
	fi
	# decrypt meta data
	echo "$password" | decryptFile "$tmp/content.gpg" "$tmp/content"
	if [ $? -ne 0 ]; then
		echo "decrypt failed"
		echo "Delete: $tmp manually"
		exit 1
	fi
	cd "$tmp"
	tar xvf content
	if [ $? -ne 0 ]; then
		echo "unpack of contents failed"
		echo "Delete: $tmp manually"
		exit 1
	fi
	rm -f content.gpg content description.gpg
	echo "OK"
	echo "Restored data in $tmp"
}

if [ "$cmd" = "-p" ]; then
	doPack
	exit 0
fi

if [ "$cmd" = "-i" ]; then
	checkPack
	exit 0
fi

if [ "$cmd" = "-u" ]; then
	unPack
	exit 0
fi


